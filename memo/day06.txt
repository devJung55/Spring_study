3-tier
	스프링 프로젝트는 3-tier 방식으로 구성한다.

  	▶ Presentation Tier - 화면 계층
      	화면에 보여주는 기술을 사용하는 영역

   	▶ Buisiness Tier - 비지니스 계층, 로직 계층
      	순수한 비지니스 로직을 담고 있는 영역

   	▶ Persistence Tier - 영속 계층, 데이터 계층
      	데이터를 어떤 방식으로 보관하고, 사용하는 가에 대한 설계가 들어가는 영역

3-tier의 목적
   	각 영역은 독립적으로 설계되어 
   	나중에 특정 기술이 변하더라도 필요한 부분을 전자제품의 부품처럼 쉽게 교환할 수 있게 하자는 방식이다.

3-tier의 구조
   	Presentation ↔ Business ↔ Persistence ↔ DBMS
           		 ↑             ↑               ↑
      	   Controller  Service        Mapper

---------------------------------------------------------------------------------------------------------

REST
	Representational State Transfer
	자원, 행위, 표현로 구성되어 있다.
	언제 어디서든 누구든 서버에 요청을 보낼 때 URI만으로도 데이터 및 CRUD의 상태를 이해할 수 있도록 설계하는 규칙.

REST URI 규칙
	1. 소문자로 작성한다.
		대문자로 작성 시 문제가 발생할 수 있기 때문에 소문자로 작성한다.

	2. 언더바 대신하이픈을 사용한다.
		가독성을 높이기 위해서 하이픈으로 구분하는 것이 좋다.

	3. URI 마지막에 슬래시를 작성하지 않는다.
		마지막에 작성하는 슬래시는 의미가 없다.

	4. 계층 관계 표현 시 슬래시 구분자로 사용한다.
		계층 관계(포함 관계)에서는 슬래시로 구분해준다.

	5. 동사는 작성하면 안된다.
		행위는 URI로 표현하지 않고 HTTP METHOD를 통해 전달한다.

	6. 파일 확장자는 포함시키지 않는다.
		파일 확장자는 URI로 표현하지 않고 Header의 Content-type을 사용하여
		body의 내용을 처리하도록 설계한다.

	7. 데이터를 대표할 때에는 명사를 사용하지만, 상태를 대표할 때에는 동사를 허용한다.
		http://www.app.com/writing (X)
		http://www.app.com/write (O)

	8. URI에 사용되는 영어단어는 복수로 작성한다.

RESTful API
	설계 방식이 모두 REST 규칙에 의해 작성된 API
	





















